#line 1 "C:\INCLUDE\Protheus.ch"
#line 1 "C:\INCLUDE\Dialog.ch"
#line 27 "Protheus.ch"
#line 1 "C:\INCLUDE\Font.ch"
#line 28 "Protheus.ch"
#line 1 "C:\INCLUDE\PTMenu.ch"
#line 30 "Protheus.ch"
#line 1 "C:\INCLUDE\Print.ch"
#line 32 "Protheus.ch"
#line 1 "C:\INCLUDE\Colors.ch"
#line 34 "Protheus.ch"
#line 1 "C:\INCLUDE\Folder.ch"
#line 36 "Protheus.ch"
#line 1 "C:\INCLUDE\msobject.ch"
#line 37 "Protheus.ch"
#line 1 "C:\INCLUDE\VKey.ch"
#line 41 "Protheus.ch"
#line 1 "C:\INCLUDE\WinApi.ch"
#line 43 "Protheus.ch"
#line 1 "C:\INCLUDE\FWCommand.ch"
#line 47 "Protheus.ch"
#line 2 "c:\users\cst1350.br\desktop\PROJET~1\contabil\ATUALI~1\rctbma1.prw"
#line 1 "C:\INCLUDE\TopConn.ch"
#line 3 "c:\users\cst1350.br\desktop\PROJET~1\contabil\ATUALI~1\rctbma1.prw"
#line 1 "C:\INCLUDE\Jpeg.ch"
#line 4 "c:\users\cst1350.br\desktop\PROJET~1\contabil\ATUALI~1\rctbma1.prw"
#line 1 "C:\INCLUDE\TbiConn.ch"
#line 1 "C:\INCLUDE\TotvsMail.ch"
#line 9 "TbiConn.ch"
#line 5 "c:\users\cst1350.br\desktop\PROJET~1\contabil\ATUALI~1\rctbma1.prw"
















Function U_RCTBMA1()



Local cPerg 		:= PADR("CTBMA1",Len(SX1->X1_GRUPO))




Local aCampos 		:= {}
Local aDescCpo		:= {}
Local aTamSX3		:= {}
Local nA 			:= 0
Local cArq 			:= ""
Local aRegs			:= {}
Private aInd  		:= {}
Private cMarca		:= ""
Private cCadastro	:= OemToAnsi("Contabilização de Documentos de Entrada")
Private Qry 		:= GetNextAlias()












Private aRotina 	:= {	{"Pesquisar",		"U_CTBMA1PE()"			,0,4}, {"Proc. Marcados",	"U_CTBMA1PR()"			,0,4}, {"Inverter Marca",	"U_CTBMA1IM()" 			,0,4}, {"Legenda",			"U_CTBMA1LEG()"			,0,4}}










aAdd(aRegs,{cPerg,"01","Digitação De"			,"","","mv_ch1","D",08,0,0,"G","","MV_PAR01","","","","", "","","","","","","","","","","","","","","","","","","","","","","","","" })
aAdd(aRegs,{cPerg,"02","Digitação Até"			,"","","mv_ch2","D",08,0,0,"G","","MV_PAR02","","","","", "","","","","","","","","","","","","","","","","","","","","","","","","" })
aAdd(aRegs,{cPerg,"03","Tabela Rateio De"		,"","","mv_ch3","C",06,0,0,"G","","MV_PAR03","","","","", "","","","","","","","","","","","","","","","","","","","","ZB7COD","","","","" })
aAdd(aRegs,{cPerg,"04","Tabela Rateio Até"		,"","","mv_ch4","C",06,0,0,"G","","MV_PAR04","","","","", "","","","","","","","","","","","","","","","","","","","","ZB7COD","","","","" })
aAdd(aRegs,{cPerg,"05","NF De" 					,"","","mv_ch5","C",09,0,0,"G","","MV_PAR05","","","","", "","","","","","","","","","","","","","","","","","","","","SF1","","","","" })
aAdd(aRegs,{cPerg,"06","NF Até"					,"","","mv_ch6","C",09,0,0,"G","","MV_PAR06","","","","", "","","","","","","","","","","","","","","","","","","","","SF1","","","","" })
aAdd(aRegs,{cPerg,"07","Serie De"				,"","","mv_ch7","C",03,0,0,"G","","MV_PAR07","","","","", "","","","","","","","","","","","","","","","","","","","","","","","","" })
aAdd(aRegs,{cPerg,"08","Serie Até"				,"","","mv_ch8","C",03,0,0,"G","","MV_PAR08","","","","", "","","","","","","","","","","","","","","","","","","","","","","","","" })

CriaSx1(aRegs)
If !Pergunte(cPerg, .T. )
	Return .F. 
Endif




Aadd(aCampos, { "TMP_OK"    	,"C",02,0 })

aTamSX3 := TAMSX3("F1_FILIAL")
Aadd(aCampos, { "TMP_FILIAL"	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("F1_DOC")
Aadd(aCampos, { "TMP_DOC"		,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("F1_SERIE")
Aadd(aCampos, { "TMP_SERIE"		,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("F1_FORNECE")
Aadd(aCampos, { "TMP_FORNEC"	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("F1_LOJA")
Aadd(aCampos, { "TMP_LOJA"		,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("A2_NREDUZ")
Aadd(aCampos, { "TMP_NREDUZ"	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("ZB7_CODRAT")
Aadd(aCampos, { "TMP_CODRAT"	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("ZB7_DESCRI")
Aadd(aCampos, { "TMP_DESCRI"	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("F1_DUPL")
Aadd(aCampos, { "TMP_DUPL"		,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("F1_EMISSAO ")
Aadd(aCampos, { "TMP_EMISSA "	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("F1_DTDIGIT ")
Aadd(aCampos, { "TMP_DTDIGI "	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("ED_CODIGO")
Aadd(aCampos, { "TMP_NATURE"	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

aTamSX3 := TAMSX3("ED_DESCRIC")
Aadd(aCampos, { "TMP_NATDES"	,aTamSX3[3],aTamSX3[1],aTamSX3[2]})

Aadd(aCampos, { "TMP_MARCA"    	,"C",01,0 })

















aCpos := { {"TMP_OK"		,,""},	  	   {"TMP_FILIAL"	,,"Filial"},	  	   {"TMP_DOC"		,,"Documento"},	  	   {"TMP_SERIE"		,,"Serie"},   		   {"TMP_DUPL"		,,"Duplicata"},   	  	   {"TMP_FORNEC"	,,"Fornecedor"},		   {"TMP_LOJA"		,,"Loja"},   		   {"TMP_NREDUZ"	,,"Nome"},   		   {"TMP_NATURE"	,,"Cod Natureza"},   		   {"TMP_NATDES"	,,"Nome Natureza"},   		   {"TMP_CODRAT"	,,"Cod. Rateio"},   		   {"TMP_DESCRI"	,,"Descr. Rateio"},   		   {"TMP_DTDIGI"	,,"Digitacao"},  		   {"TMP_EMISSA"	,,"Emissao"}}




cArq := CriaTrab(aCampos, .T. )




If Select("TRB") > 0
	DbSelectArea("TRB")
	TRB->(DbCloseArea())
Endif

dbUseArea( .T. ,"DBFCDX",cArq,"TRB", .f. )
DbSelectArea("TRB")




aInd	:= {}
Aadd(aInd,{CriaTrab(Nil, .F. ),"TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA","Filial+Doc+Serie+Fornece+Loja"})

For nA := 1 to Len(aInd)
	IndRegua("TRB",aInd[nA,1],aInd[nA,2],,,OemToAnsi("Criando Índice Temporário...") )
next
DbClearIndex()

For nA := 1 to Len(aInd)
	dbSetIndex(aInd[nA,1]+OrdBagExt())
next




cMarca := GetMark(,"TRB","TMP_OK")




Processa({|| GERAQRY()} ,"Gerando dados...")




DbSelectArea("TRB")
DbSetOrder(1)
dbGotop()




MarkBrow("TRB","TMP_OK","TMP_MARCA=='N'",aCpos,,cMarca, "U_CTBMA1MT()",,,,"U_CTBMA1MC()",)




If Select("TRB") > 0
	DbSelectArea("TRB")
	TRB->(DbCloseArea())
	FErase(cArq+GetDbExtension())
	For nA := 1 to Len(aInd)
		FErase(aInd[nA,1]+OrdBagExt())
	next
Endif

Return


















Static Function GERAQRY()



Local nTotRegs		:= 0
Local cQry			:= ""
Local nX			:= 0
Local nCountReg		:= 1

Local cDataDe 	:=	DtoS(MV_PAR01)
Local cDataAte	:= 	DtoS(MV_PAR02)
Local cRatDe	:= 	MV_PAR03
Local cRatAte	:= 	MV_PAR04
Local cNfDe 	:= 	MV_PAR05
Local cNfAte	:= 	MV_PAR06
Local cSerieDe	:= 	MV_PAR07
Local cSerieAte	:= 	MV_PAR08
Local cBranco	:= ""

Local aIndisp	:= {}

Local cUltRev	:= ""
Local cAnoMes	:= ""




























__execSql(Qry," SELECT F1_FILIAL, F1_DOC,F1_SERIE,F1_FORNECE,F1_LOJA,F1_DUPL,F1_EMISSAO, F1_DTDIGIT, EV_XCODRAT ZB7_CODRAT, ED_CODIGO, ED_DESCRIC FROM  "+RetSqlName('SF1')+" SF1(NOLOCK), "+RetSqlName('SEV')+" SEV(NOLOCK),  "+RetSqlName('SED')+" SED(NOLOCK) WHERE F1_FILIAL >= ' ' AND F1_DOC BETWEEN  "+___SQLGetValue(CNFDE)+" AND  "+___SQLGetValue(CNFATE)+" AND F1_SERIE BETWEEN  "+___SQLGetValue(CSERIEDE)+" AND  "+___SQLGetValue(CSERIEATE)+" AND F1_XPRORAT = ' ' AND F1_DTDIGIT BETWEEN  "+___SQLGetValue(CDATADE)+" AND  "+___SQLGetValue(CDATAATE)+" AND F1_DTLANC <> '        ' AND SF1.D_E_L_E_T_= ' ' AND EV_FILIAL =  '" +xFilial('SEV')+"'  AND EV_NUM = F1_DOC AND EV_PREFIXO = F1_PREFIXO AND EV_CLIFOR = F1_FORNECE AND EV_LOJA = F1_LOJA AND ((EV_XCODRAT BETWEEN  "+___SQLGetValue(CRATDE)+" AND  "+___SQLGetValue(CRATATE)+") OR (EV_XCODRAT = ' ')) AND SEV.D_E_L_E_T_= ' ' AND ED_FILIAL =  '" +xFilial('SED')+"'  AND ED_CODIGO = EV_NATUREZ AND SED.D_E_L_E_T_= ' '",{},.F.)




(Qry)->( DbEval( {|| nTotRegs++},,{ || !Eof()} ))




DbSelectArea(Qry)
DbGoTop()
ProcRegua(nTotRegs)
While !Eof()




	IncProc("Processando registro "+Alltrim(Str(nCountReg))+" de "+Alltrim(Str(nTotRegs))+".")




	DbSelectArea("TRB")
	DbSetOrder(1)
	RecLock("TRB", .T. )

	TRB->TMP_OK		:= Space(02)
	TRB->TMP_FILIAL	:= (QRY)->F1_FILIAL
	TRB->TMP_DOC		:= (QRY)->F1_DOC
	TRB->TMP_SERIE  	:= (QRY)->F1_SERIE
	TRB->TMP_FORNEC	:= (QRY)->F1_FORNECE
	TRB->TMP_LOJA 	:= (QRY)->F1_LOJA
	TRB->TMP_NREDUZ 	:= Posicione("SA2",1,xFilial("SA2")+(QRY)->F1_FORNECE+(QRY)->F1_LOJA,"A2_NREDUZ")
	TRB->TMP_CODRAT	:= (QRY)->ZB7_CODRAT
	TRB->TMP_DESCRI	:= Posicione("ZB7",1,xFilial("ZB7")+(QRY)->ZB7_CODRAT,"ZB7_DESCRI")
	TRB->TMP_DUPL	:= (QRY)->F1_DUPL
	TRB->TMP_EMISSA := Stod((QRY)->F1_EMISSAO)
	TRB->TMP_DTDIGI := Stod((QRY)->F1_DTDIGIT)
	TRB->TMP_NATURE	:= (QRY)->ED_CODIGO
	TRB->TMP_NATDES 	:= (QRY)->ED_DESCRIC
	TRB->TMP_MARCA	:= Space(01)

	MsUnlock()

	nCountReg++

	DbSelectArea(QRY)
	DbSkip()

Enddo





dbSelectArea("TRB")
dbSetOrder(1)
dbGoTop()

while !EOF()

	If Empty(TRB->TMP_CODRAT)
		If aScan(aIndisp,TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA)) == 0
			aAdd(aIndisp,TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA))
		Endif
	Endif











	cAnoMes	:= U_GetCompetencia(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA)
	cUltRev	:= U_RZB7ULTR(TRB->TMP_CODRAT,cAnoMes, .T. )

	If !Empty(Alltrim(cUltRev))





		dbSelectArea("ZB8")
		dbSetOrder(1)
		dbSeek(xFilial("ZB8")+TRB->TMP_CODRAT+cAnoMes+cUltRev, .F. )

		If !Found()
			If aScan(aIndisp,TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA)) == 0
				aAdd(aIndisp,TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA))
			Endif
		Endif

	Endif

	dbSelectArea("TRB")
	dbSkip()
EndDo




For nX	:= 1 to Len(aIndisp)

	dbSelectArea("TRB")
	dbSetOrder(1)
	If dbSeek(aIndisp[nX], .F. )

		while !EOF() .and. TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA)==aIndisp[nX]

			RecLock("TRB", .F. )
			TRB->TMP_MARCA	:= "N"
			MsUnlock()

			dbSelectArea("TRB")
			dbSkip()

		EndDo

	Endif

next




If Select(QRY) > 0
	DbSelectArea(QRY)
	DbCloseArea()
Endif

Return(Nil)














Function U_CTBMA1IM()



Local aArea		:= GetArea()
Local aAreaTMP	:= SF1->(GetArea())




CursorWait()

DbSelectArea("TRB")
DbGotop()

While !Eof()

	If TRB->TMP_OK == ThisMark()
		Reclock("TRB", .F. )
		TRB->TMP_OK := Space(02)
		MsUnlock()
	Else
		Reclock("TRB", .F. )
		TRB->TMP_OK := ThisMark()
		MsUnlock()
	Endif

	TRB->(dbSkip())

EndDo

CursorArrow()

RestArea(aArea)
Return(Nil)














Function U_CTBMA1MT()



Local aArea		:= GetArea()




CursorWait()

DbSelectArea("TRB")
DbGoTop()

While !Eof()

	If TRB->TMP_MARCA <> "N"
		Reclock("TRB", .F. )
		TRB->TMP_OK := ThisMark()
		MsUnlock()
	Endif

	TRB->(dbSkip())

EndDo

CursorArrow()

RestArea(aArea)
Return(Nil)

















Function U_CTBMA1MC()



Local aArea		:= GetArea()
Local cChave	:= TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA)
Local nRecNo	:= TRB->(RecNo())




CursorWait()

dbSelectArea("TRB")
dbSetOrder(1)
dbGoTop()

If dbSeek(cChave, .F. )

		while !EOF() .and. TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA)==cChave

			MarcaBrowse()

			dbSelectArea("TRB")
			TRB->(dbSkip())
		EndDo

Endif

TRB->(dbGoTo(nRecNo))

MarkBRefresh()

CursorArrow()

RestArea(aArea)
Return(Nil)
















Static Function MarcaBrowse()

If TRB->TMP_OK == ThisMark()
	Reclock("TRB", .F. )
	TRB->TMP_OK := Space(02)
	MsUnlock()
Else
	Reclock("TRB", .F. )
	TRB->TMP_OK := ThisMark()
	MsUnlock()
Endif

Return .T. 



























Static Function CriaSx1(aRegs)

Local aAreaAtu	:= GetArea()
Local aAreaSX1	:= SX1->(GetArea())
Local nJ		:= 0
Local nY		:= 0

dbSelectArea("SX1")
dbSetOrder(1)

For nY := 1 To Len(aRegs)
	If !MsSeek(Padr(aRegs[nY,1],Len(SX1->X1_GRUPO))+aRegs[nY,2])
		RecLock("SX1", .T. )
		For nJ := 1 To FCount()
			If nJ <= Len(aRegs[nY])
				FieldPut(nJ,aRegs[nY,nJ])
			EndIf
		next
		MsUnlock()
	EndIf
next

RestArea(aAreaSX1)
RestArea(aAreaAtu)
Return(Nil)
















Function U_CTBMA1LEG()


Local aLegenda := { 	{"BR_VERDE"		, "Docs Disponíveis para processamento" }, {"BR_VERMELHO"	, "Doc. Indisponíveis para processamento" }}

Local uRetorno := .T. 

BrwLegenda(cCadastro,"Legenda",aLegenda)

Return uRetorno














Function U_CTBMA1PE()




Local cCampo	:= Space(TamSX3("F1_FILIAL")[1]+TamSX3("F1_DOC")[1]+TamSX3("F1_SERIE")[1]+TamSX3("F1_FORNECE")[1]+TamSX3("F1_LOJA")[1])
Local aItens	:= {}
Local cCombo 	:= ""
Local lSeek		:= .F. 
Local nOrd		:= TRB->(INDEXORD())
Local nX		:= 0




For nX := 1 to Len(aInd)
	If aInd[nX,3] <> Nil
		Aadd(aItens, aInd[nX,3])
	Endif
next
cCombo 	:= aItens[nOrd]




oDlg = MsDialog():New( 00, 00, 100, 490, "Pesquisa",,,.F.,,,,,,.T.,, ,.F. )

 oCBX := TComboBox():New( 05, 05, { | u | If( PCount() == 0, cCombo, cCombo := u ) }, aItens, 206, 36, oDlg,,,,,,.T., oDlg:oFont,,.F.,,.F.,,, ,"cCombo" )
oCbx:bChange := {|| (nOrd := oCbx:nAt,cCampo := Space(TamSX3("F1_FILIAL")[1]+TamSX3("F1_DOC")[1]+TamSX3("F1_SERIE")[1]+TamSX3("F1_FORNECE")[1]+TamSX3("F1_LOJA")[1]) )}

 oPesqGet := TGet():New( 22, 05, { | u | If( PCount() == 0, cCampo, cCampo := u ) },, 206, 10,,,,,,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F. ,,"cCampo",,,, )

 SButton():New( 05, 215,1,{||  (lSeek:= .T. ,oDlg:End())}, oDlg,.T.,,)
 SButton():New( 20, 215,2,{||  oDlg:End()}, oDlg,.T.,,)

oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted,.T.,,,, oDlg:bRClicked, )




If lSeek
	DbSelectArea("TRB")
	DbSetOrder(nOrd)
	DbSeek(Alltrim(cCampo), .T. )
Endif

Return( .T. )





















































Function U_CTBMA1PR()



Local aArea		:= GetArea()
Local aProc		:= {}
Local nLoop		:= 0
Local nLoop2	:= 0
Local nLoop3	:= 0
Local cChavSEV	:= ""

Local cLctoDeb	:= "RLD"
Local cLctoCrd	:= "RLC"

Local cLote    	:= ALLTRIM(SuperGetMV("MV_XLOTRAT",,""))
Local cArquivo 	:= ""
Local nHdlPrv

Local cAnoMes	:= ""
Local cUltRev	:= ""
Local nQtdCtb	:= 0
Local nTotal	:= 0

Local lView  	:= .F. 
Local lAglu  	:= .F. 

Local aCodRat	:= {}












Local aLctoDeb	:= {}

Local nMenorSEV		:= 0
Local nMaiorSEV		:= 0
Local nPosMenorSEV	:= 0
Local nPosMaiorSEV	:= 0
Local nSomaSEV		:= 0







Local dDataAnt		:= dDataBase




Private CXVARNAT	:= ""
Private CXCCTRAN	:= ""




Private CXITTRAN	:= ""
Private CXCLTRAN	:= ""

Private CXCCDEB		:= ""
Private CXITDEB		:= ""
Private CXCLDEB		:= ""
Private CXVALOR		:= 0
Private CXVLCRD		:= 0

Private CXNOTENT	:= ""




If !VerPadrao(cLctoDeb)
 	Aviso("Atenção",OemToAnsi("Não localizado lançamento padronizado "+cLctoDeb+". "),{"OK"})
 	Return
EndIf

If !VerPadrao(cLctoCrd)
 	Aviso("Atenção",OemToAnsi("Não localizado lançamento padronizado "+cLctoCrd+". "),{"OK"})
 	Return
EndIf





dbSelectArea("TRB")
dbGoTop()

while !EOF()




	If TRB->TMP_OK == ThisMark() .and.  TRB->TMP_MARCA <> "N"
		If aScan(aProc,TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA))==0
			aAdd(aProc,TRB->(TMP_FILIAL+TMP_DOC+TMP_SERIE+TMP_FORNEC+TMP_LOJA))
		Endif
	Endif

	dbSelectArea("TRB")
	dbSkip()
EndDo





nQtdCtb			:= 0

For nLoop	:= 1 to Len(aProc)

	lLancOk			:= .F. 
	aCodRat			:= 	{}

	nTotal			:= 0




	dbSelectArea("SF1")
	dbSetOrder(1)
	dbSeek(aProc[nLoop], .F. )







	cAnoMes	:= U_GetCompetencia(aProc[nLoop])




	dbSelectArea("SA2")
	dbSetOrder(1)
	dbSeek(xFilial("SA2")+SF1->F1_FORNECE+SF1->F1_LOJA, .F. )




	dbSelectArea("SE2")
	dbSetOrder(6)
	dbSeek(xFilial("SE2")+SF1->F1_FORNECE+SF1->F1_LOJA+SF1->F1_PREFIXO+SF1->F1_DUPL, .F. )




	cChavSEV	:= RetChaveSEV("SE2")

	dbSelectArea("SEV")
	dbSetOrder(1)
	dbGoTop()


	while !EOF()

		If SEV->EV_PREFIXO==SUBSTR(cChavSEV,3,3) .and.  SEV->EV_NUM==SUBSTR(cChavSEV,6,9) .and.  SEV->EV_TIPO==SUBSTR(cChavSEV,18,3) .and.  SEV->EV_CLIFOR==SUBSTR(cChavSEV,21,6) .and.  SEV->EV_LOJA==SUBSTR(cChavSEV,27,2)

			cUltRev	:= U_RZB7ULTR(SEV->EV_XCODRAT,cAnoMes, .T. )

			nPosMenorSEV	:=	0
			nPosMaiorSEV	:= 	0
			nMenorSEV		:= 	0
			nMaiorSEV		:=	0
			aLctoDeb		:= 	{}

			nSomaSEV		:= 	0






			dbSelectArea("ZB7")
			dbSetOrder(1)
			dbSeek(xFilial("ZB7")+SEV->EV_XCODRAT+cAnoMes+cUltRev, .F. )

			CXCCTRAN	:= ZB7->ZB7_CCTRAN
			CXITTRAN	:= ZB7->ZB7_ITTRAN
			CXCLTRAN	:= ZB7->ZB7_CLTRAN




			CXNOTENT	:= SF1->(F1_FILIAL+F1_DOC+F1_SERIE+F1_FORNECE+F1_LOJA+F1_TIPO)




			aAdd(aCodRat,xFilial("ZB7")+SEV->EV_XCODRAT+cAnoMes+cUltRev)

			dbSelectArea("ZB8")
			dbSetOrder(1)
			dbSeek(xFilial("ZB8")+SEV->EV_XCODRAT+cAnoMes+cUltRev, .F. )
			while !EOF() .and. ZB8->(ZB8_FILIAL+ZB8_CODRAT+ZB8_ANOMES+ZB8_REVISA)==xFilial("ZB8")+SEV->EV_XCODRAT+cAnoMes+cUltRev









				aAdd(aLctoDeb,{SEV->EV_NATUREZ,							ZB8->ZB8_CCDBTO,							ZB8->ZB8_ITDBTO,							ZB8->ZB8_CLVLDB,							Round(SEV->EV_VALOR*(ZB8->ZB8_PERCEN/100),2),							xFilial("ZB8")+SEV->EV_XCODRAT+cAnoMes+cUltRev})

				dbSelectArea("ZB8")
				dbSkip()

			Enddo




			For nLoop2 := 1 to Len(aLctoDeb)

				If nLoop2 == 1
					nPosMenorSEV	:= 1
					nPosMaiorSEV	:= 1
					nMenorSEV		:= 	aLctoDeb[nLoop2][5]
					nMaiorSEV		:=	aLctoDeb[nLoop2][5]
				Else
					If aLctoDeb[nLoop2][5] > nMaiorSEV
						nMaiorSEV		:= 	aLctoDeb[nLoop2][5]
						nPosMaiorSEV	:= 	nLoop2
					Endif

					If aLctoDeb[nLoop2][5] < nMenorSEV
						nMenorSEV		:= 	aLctoDeb[nLoop2][5]
						nPosMenorSEV	:= 	nLoop2
					Endif
				Endif

				nSomaSEV	+= aLctoDeb[nLoop2][5]

			next






			If Round(SEV->EV_VALOR,2) > nSomaSEV
				aLctoDeb[nPosMenorSEV][5]	+= Round(SEV->EV_VALOR-nSomaSEV,2)
			Endif






			If Round(SEV->EV_VALOR,2) < nSomaSEV
				aLctoDeb[nPosMaiorSEV][5]	-= Round(nSomaSEV-SEV->EV_VALOR,2)
			Endif






			dDataBase	:= SF1->F1_DTDIGIT




			cArquivo := ""
			nHdlPrv  := HeadProva(cLote,"RCTBMA1",SubStr(cUsuario,7,6),@cArquivo)

			If nHdlPrv <= 0
				Help(" ",,1,"A100NOPRV")
				Return
			EndIf

			CXVLCRD		:= SEV->EV_VALOR
			CXVARNAT	:= SEV->EV_NATUREZ

			nTotal += DetProva(nHdlPrv,cLctoCrd,"RCTBMA1",cLote)




			For nLoop2:=1 to Len(aLctoDeb)

				CXVARNAT	:= aLctoDeb[nLoop2][1]

				CXCCDEB		:= aLctoDeb[nLoop2][2]
				CXITDEB		:= aLctoDeb[nLoop2][3]
				CXCLDEB		:= aLctoDeb[nLoop2][4]

				CXVALOR		:= aLctoDeb[nLoop2][5]

				nTotal 		+= DetProva(nHdlPrv,cLctoDeb,"RCTBMA1",cLote)

			next

			RodaProva(nHdlPrv,nTotal)
			lLancOk := cA100Incl(cArquivo,nHdlPrv,3,cLote,lView,lAglu)

			If lLancOK

				For nLoop2 := 1 to Len(aLctoDeb)
					dbSelectArea("ZB7")
					dbSetOrder(1)
					If dbSeek(aLctoDeb[nLoop2][6], .F. )
						RecLock("ZB7", .F. )
						ZB7->ZB7_PROCES	:= "S"
						MsUnlock()
					Endif
			    next

				nQtdCtb++

			Endif
		EndIf

		dbSelectArea("SEV")
		dbSkip()

	EndDo

	If nQtdCtb > 0
		dbSelectArea("SF1")
		dbSetOrder(1)
		dbSeek(aProc[nLoop], .F. )
		RecLock("SF1", .F. )
			SF1->F1_XPRORAT	:= "1"
			SF1->F1_XDTCONT	:= dDataAnt
			SF1->F1_XUSRCON	:= __cUserID






			SF1->F1_DTLANC	:= SF1->F1_DTDIGIT
		MsUnlock()
	Endif





	dDataBase	:= dDataAnt

next




If nQtdCtb > 0
 	Aviso("AVISO",OemToAnsi("Gerado(s) "+AllTrim(Str(nQtdCtb))+" Lancamento(s) dos Rateios"),{"OK"})
Else
	Aviso(OemToAnsi("ATENÇÃO"),OemToAnsi("Não foi gerado nenhum Lançamento Contábil."),{"OK"})
EndIf




TRB->(dbGoTop())
while !EOF()
	RecLock("TRB", .F. )
	TRB->(dbDelete())
	TRB->(MsUnlock())

	TRB->(dbSkip())
Enddo




Processa({|| GERAQRY()} ,"Gerando dados...")

MarkBRefresh()

RestArea(aArea)
Return